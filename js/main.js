// Generated by CoffeeScript 1.4.0
(function() {
  var Person, Team, Teams, TeamsView;

  Person = Backbone.Model.extend({
    initialize: function(name) {
      return this.name = name;
    }
  });

  Team = Backbone.Model.extend({
    /* @param members : An array of Person model
    */

    initialize: function(members) {
      this.set("members", members);
      return this;
    },
    length: function() {
      return this.get("members").length;
    },
    memberAt: function(index) {
      var mem;
      mem = this.get("members")[index];
      if (mem === void 0) {
        return {
          name: ""
        };
      } else {
        return mem;
      }
    }
  });

  Teams = Backbone.Collection.extend({
    model: Team
  });

  TeamsView = Backbone.View.extend({
    initialize: function(teams) {
      this.teams = teams;
      _.bindAll(this, "render");
      return this.teams.bind("all", this.render);
    },
    largestTeam: function() {
      var i, index, _i, _len, _ref;
      index = 0;
      _ref = _.range(this.teams.length);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (this.teams.at(i).length() > this.teams.at(index).length()) {
          index = i;
        }
      }
      return this.teams.at(index);
    },
    render: function() {
      var i, j, largestTeamLength, name, renderBuffer, _i, _j, _len, _len1, _ref, _ref1;
      renderBuffer = "";
      largestTeamLength = this.largestTeam().length();
      _ref = _.range(largestTeamLength);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        renderBuffer += "<tr>";
        _ref1 = _.range(this.teams.length);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          j = _ref1[_j];
          renderBuffer += "<td>";
          name = this.teams.at(j).memberAt(i).name;
          renderBuffer += name;
          renderBuffer += "</td>";
        }
        renderBuffer += "</tr>";
      }
      return this.setElement(renderBuffer);
    }
  });

  jQuery(function() {
    var member, personArray, team, teamList, teamsView, util, _i, _j, _len, _len1;
    window.teams = new Teams();
    teamList = JSON.parse("[\n    [\n        \"Mani Doraisamy\",\n        \"John Prawyn\",\n        \"Raghavan\",\n        \"Nadha Kumar\",\n        \"Satish Kumar\"\n    ],\n    [\n        \"Krishna Kumar\",\n        \"Giragadurai\",\n        \"Selva\",\n        \"Dinesh\",\n        \"Vivek\",\n        \"Adhi\"\n    ],\n    [\n        \"Naveen\",\n        \"Karthi H\",\n        \"Latha\",\n        \"Lakshmi\",\n        \"Gautam\"\n    ],\n    [\n        \"Balaji\",\n        \"Raju\",\n        \"Prasanna J\",\n        \"Karthikeyan\",\n        \"Kabilan\"\n    ],\n    [\n        \"Kamal\",\n        \"Batulla\",\n        \"Santhosh M\",\n        \"Prasanna R\",\n        \"Arunachalam\"\n    ]\n]");
    for (_i = 0, _len = teamList.length; _i < _len; _i++) {
      team = teamList[_i];
      personArray = [];
      for (_j = 0, _len1 = team.length; _j < _len1; _j++) {
        member = team[_j];
        personArray.push(new Person(member));
      }
      teams.add(new Team(personArray));
    }
    teamsView = new TeamsView(teams);
    util = {
      tbody: $("#teamTable tbody"),
      render: function(teamsView) {
        teamsView.render();
        return this.tbody.html(teamsView.$el);
      },
      shuffle: function(teams) {
        return teams.models = _.shuffle(teams.models);
      },
      shuffleAndRender: function(teamsView) {
        this.shuffle(teamsView.teams);
        return this.render(teamsView);
      },
      shuffleTillMaxCount: function(teamsView, currentCount, maxCount, interval) {
        var self;
        this.maxCount = maxCount;
        this.currentCount = 0;
        self = this;
        if (maxCount >= currentCount) {
          return setTimeout(function() {
            self.shuffleAndRender(teamsView);
            self.shuffleTillMaxCount(teamsView, currentCount + 1, maxCount, interval);
            console.log("shuffle");
            return console.log(currentCount, maxCount);
          }, interval);
        }
      }
    };
    util.render(teamsView);
    $("#shuffleButton").click(function(e) {
      return util.shuffleTillMaxCount(teamsView, 0, Math.floor(Math.random() * 50), 500);
    });
    return this;
  });

}).call(this);
